# """This is the schema for our remote DB. Prisma takes this and creates a full CRUD API (like an ORM)"""

# """ When adding a new model, create it here first, run prisma-deploy (npm run deploy) """

# """ Prisma deploying will pull down a new generated/prisma.graphql """
# """ file with all the generated Queries and Mutations for the new model """

# """ Then you update your schema.graphql (public-facing API for your db) by adding what you want from the new model """

# """  Then write your Mutations and Queries for the model in Mutation.js and 'Query.js """

enum Permission {
	ADMIN
	USER
	ITEMCREATE
	ITEMUPDATE
	ITEMDELETE
	PERMISSIONUPDATE
}

type User {
	id: ID! @id
	name: String!
	email: String! @unique
	password: String!
	resetToken: String
	resetTokenExpiry: Float
	permissions: [Permission] @scalarList(strategy: RELATION)
	updatedAt: DateTime! @updatedAt
	createdAt: DateTime! @createdAt
	cart: [CartItem!]!
}

type Item {
	id: ID! @id
	title: String!
	description: String!
	image: String!
	largeImage: String!
	price: Int!
	updatedAt: DateTime! @updatedAt
	createdAt: DateTime! @createdAt
	user: User!
}

type CartItem {
	id: ID! @id
	quantity: Int! @default(value: 1)
	item: Item # joins a user with an item
	user: User!
}
